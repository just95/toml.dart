name: Dart CI

# Trigger the workflow whenever commits are pushed to the `main` branch.
on:
  push:
    branches:
      - 'main'
      - 'ast' # TODO: remove me

jobs:

  # Analyzes the Dart code of the package (i.e., all `.dart` files in the `lib`,
  # `bin` and `test` directories) in the with `dart analyze`. The `example`s are
  # not analyzed by this job.
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Analyze Code
        run: dart analyze

  # Tests whether all Dart source files of the package including the `example`s
  # are formatted correctly with `dart format`.
  format:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Check Code Formatting
        run: dart format --show all --output none --set-exit-if-changed .

  # Runs the unit tests of the package with `dart test`.
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Unit Tests
        run: dart test --reporter expanded

  # Compiles the test decoder script for the `toml-test` test suite.
  compile-toml-test:
    name: Compile `toml-test` Scripts
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Compile Decoder Scripts
        run: |
          mkdir -p build/bin
          dart compile exe -o build/bin/decoder bin/decoder.dart
      - name: Upload Decoder Executable
        uses: actions/upload-artifact@v2
        with:
          name: toml-test-decoder
          path: build/bin/decoder

  # Runs the `toml-test` test suite against the executable built by the
  # `compile-toml-test` job.
  toml-test:
    name: Run `toml-test` Test Suite
    runs-on: ubuntu-latest
    container:
      image: golang:1.15.6
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install `toml-test`
        run: go get github.com/BurntSushi/toml-test
      - name: Download Decoder Executable
        uses: actions/download-artifact@v2
        with:
          name: toml-test-decoder
      - name: Run `toml-test` Against Decoder
        run: $GOPATH/bin/toml-test build/bin/decoder
