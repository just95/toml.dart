# This is the main workflow that performs checks on the source code of the
# package itself.

name: Dart CI

# Trigger the workflow whenever commits are pushed to the `main` branch or
# development braches with the `-ci` postfix. Commits that only modify examples
# do not trigger the workflow. There is a separate workflow that checks
# the example source code.
on:
  push:
    branches:
      - 'main'
      - '*-ci'
    paths-ignore:
      - 'example/**'

jobs:
  # Analyzes the Dart code of the package (i.e., all `.dart` files in the `lib`,
  # `bin` and `test` directories) in the with `dart analyze`. The `example`s are
  # not analyzed by this job.
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Analyze Code
        run: dart analyze --fatal-infos

  # Tests whether all Dart source files of the package (i.e., all `.dart` files
  # in the `lib`, `bin` and `test` directories) are formatted correctly with
  # `dart format`. The `example`s are not analyzed by this job.
  format:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Check Code Formatting
        run: |
          dart format --show all            \
                      --output none         \
                      --set-exit-if-changed \
                      bin lib test

  # Runs the unit tests of the package with `dart test` in the Dart VM.
  #
  # While most other checks run with the latest version of the Dart SDK only,
  # the unit tests are executed with all supported versions (according to the
  # lower SDK constraint specified in `pubspec.yaml`) in addition to the latest
  # version.
  #
  # For support of SDK versions prior to 2.10, the `dart pub get` and
  # `dart test` commands have to fallback to `pub get` and `pub run test`.
  vm-test:
    name: Run Unit Tests in Dart VM
    runs-on: ubuntu-latest
    container:
      image: google/dart:${{ matrix.dart-version }}
    strategy:
      matrix:
        dart-version: ['2.7', '2.8', '2.9', '2.10', latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get || pub get
      - name: Run Unit Tests
        run: dart test --reporter expanded || pub run test --reporter expanded

  # Runs the unit tests of the package with `dart test` in Node.js.
  js-test:
    name: Run Unit Tests in Node.js
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    strategy:
      matrix:
        node-version: [10, 12, 14, 15]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Unit Tests
        run: dart test --reporter expanded --platform node

  # Runs the unit tests of the package with `dart test` in Firefox.
  firefox-test:
    name: Run Unit Tests in Firefox
    runs-on: ubuntu-latest
    needs: js-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Dart SDK
        uses: vanesyan/setup-dart@v1
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Headless Unit Tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: dart test --reporter expanded --platform firefox

  # Runs the unit tests of the package with `dart test` in Chrome.
  chrome-test:
    name: Run Unit Tests in Chrome
    runs-on: ubuntu-latest
    needs: js-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Dart SDK
        uses: vanesyan/setup-dart@v1
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Headless Unit Tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: dart test --reporter expanded --platform chrome

  # Compiles the test decoder script for the `toml-test` test suite.
  compile-toml-test:
    name: Compile `toml-test` Scripts
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Compile Decoder Scripts
        run: |
          mkdir -p build/bin
          dart compile exe -o build/bin/decoder bin/decoder.dart
      - name: Upload Decoder Executable
        uses: actions/upload-artifact@v2
        with:
          name: toml-test-decoder
          path: build/bin/decoder

  # Runs the `toml-test` test suite against the executable built by the
  # `compile-toml-test` job.
  toml-test:
    name: Run `toml-test` Test Suite
    runs-on: ubuntu-latest
    container:
      image: golang:1.15.6
    needs: compile-toml-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install `toml-test`
        run: go get github.com/BurntSushi/toml-test
      - name: Download Decoder Executable
        uses: actions/download-artifact@v2
        with:
          name: toml-test-decoder
          path: build/bin
      - name: Set Decoder Executable Permissions
        run: chmod +x build/bin/decoder
      - name: Run `toml-test` Against Decoder
        run: $GOPATH/bin/toml-test build/bin/decoder

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Print `dartdoc` Version
        run: dartdoc --version
      - name: Install Dependencies
        run: dart pub get
      - name: Build Documentation
        run: dartdoc --no-show-progress
      - name: Upload Documentation
        uses: actions/upload-artifact@v2
        with:
          name: api-documentation
          path: doc/api
