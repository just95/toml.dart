# This is the main workflow that performs checks on the source code of the
# package itself.

name: Dart CI

# Trigger the workflow whenever commits are pushed to the `main` branch or
# development braches with the `-ci` postfix. Commits that only modify examples
# do not trigger the workflow. There is a separate workflow that checks
# the example source code.
on:
  push:
    branches:
      - 'main'
      - '*-ci'
    paths-ignore:
      - 'example/**'

jobs:
  # Analyzes the Dart code of the package (i.e., all `.dart` files in the `lib`,
  # `bin` and `test` directories) in the with `dart analyze`. The `example`s are
  # not analyzed by this job.
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Analyze Code
        run: dart analyze --fatal-infos

  # Tests whether all Dart source files of the package (i.e., all `.dart` files
  # in the `lib`, `bin` and `test` directories) are formatted correctly with
  # `dart format`. The `example`s are not analyzed by this job.
  format:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Check Code Formatting
        run: |
          dart format --show all            \
                      --output none         \
                      --set-exit-if-changed \
                      bin lib test

  # Runs the unit tests of the package with `dart test` in the Dart VM.
  #
  # While most other checks run with the latest version of the Dart SDK only,
  # the unit tests are executed with all supported versions (according to the
  # lower SDK constraint specified in `pubspec.yaml`) in addition to the latest
  # version.
  #
  # For support of SDK versions prior to 2.10, the `dart pub get` and
  # `dart test` commands have to fallback to `pub get` and `pub run test`.
  vm-test:
    name: Run Unit Tests in Dart VM
    runs-on: ubuntu-latest
    container:
      image: google/dart:${{ matrix.dart-version }}
    strategy:
      matrix:
        dart-version: ['2.12', latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Unit Tests
        run: |
          dart -DSILENT_OBSERVATORY=true                   \
               test --reporter expanded                    \
                    --coverage=./coverage/vm/$dart_version
        env:
          dart_version: ${{ matrix.dart-version }}
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/

  # Runs the unit tests of the package with `dart test` in Node.js.
  js-test:
    name: Run Unit Tests in Node.js
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    strategy:
      matrix:
        node-version: [10, 12, 14, 15]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Unit Tests
        run: |
          dart test --reporter expanded                      \
                    --platform node                          \
                    --coverage=./coverage/node/$node_version
        env:
          node_version: ${{ matrix.node-version }}
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/

  # Runs the unit tests of the package with `dart test` in Firefox.
  firefox-test:
    name: Run Unit Tests in Firefox
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Dart SDK
        uses: dart-lang/setup-dart@v0.4
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Headless Unit Tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            dart test --reporter expanded           \
                      --platform firefox            \
                      --coverage=./coverage/firefox
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/

  # Runs the unit tests of the package with `dart test` in Chrome.
  #
  # The collection of test coverage information had to be disabled in Chrome
  # since `dart test` does not terminate otherwise at the moment.
  chrome-test:
    name: Run Unit Tests in Chrome
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Dart SDK
        uses: dart-lang/setup-dart@v0.4
      - name: Print Dart SDK Version
        run: dart --version
      - name: Install Dependencies
        run: dart pub get
      - name: Run Headless Unit Tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            dart test --reporter expanded            \
                      --platform chrome              \
                      # --coverage=./coverage/chrome
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/

  # Combines the test coverage information of all other jobs into a `lcov.info`
  # file and uploads it to coveralls.io.
  coverage:
    name: Collect Test Coverage
    runs-on: ubuntu-latest
    needs:
      - vm-test
      - js-test
      - firefox-test
      - chrome-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download Coverage
        uses: actions/download-artifact@v2
        with:
          name: coverage
          path: coverage/
      - name: Use Dart SDK
        uses: dart-lang/setup-dart@v0.4
      - name: Print Dart SDK Version
        run: dart --version
      - name: Add Executables Installed by Pub to PATH
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH
      - name: Install Dependencies
        run: dart pub get
      - name: Install coverage Package
        run: dart pub global activate coverage
      - name: Format Coverage
        run: |
          format_coverage --packages=.packages    \
                          --in coverage           \
                          --report-on lib         \
                          --lcov                  \
                          -out coverage/lcov.info
      - name: Upload Coverage to coveralls.io
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    container:
      image: google/dart:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Print Dart SDK Version
        run: dart --version
      - name: Print `dartdoc` Version
        run: dartdoc --version
      - name: Install Dependencies
        run: dart pub get
      - name: Build Documentation
        run: dartdoc --no-show-progress
      - name: Upload Documentation
        uses: actions/upload-artifact@v2
        with:
          name: api-documentation
          path: doc/api
